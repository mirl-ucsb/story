name: Upgrade Telar

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: 'Create pull request with changes'
        type: boolean
        default: true

permissions:
  contents: write
  issues: write

jobs:
  upgrade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyyaml pandas

      - name: Fetch latest upgrade scripts
        run: |
          echo "Fetching latest upgrade scripts from telar repository..."
          # Remove old scripts if they exist
          rm -rf scripts/
          # Fetch latest scripts from telar repo
          curl -L https://github.com/UCSB-AMPLab/telar/archive/refs/heads/main.tar.gz | tar xz --strip-components=1 telar-main/scripts
          echo "✓ Latest upgrade scripts fetched"

      - name: Check current version
        id: check_version
        run: |
          CURRENT_VERSION=$(python3 -c "import yaml; config=yaml.safe_load(open('_config.yml')); print(config.get('telar', {}).get('version', '0.2.0-beta'))")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Run upgrade script
        id: upgrade
        run: |
          python scripts/upgrade.py

          if [ -f UPGRADE_VERSION.txt ]; then
            VERSION=$(cat UPGRADE_VERSION.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Upgraded to version: $VERSION"
          else
            echo "No upgrade needed or upgrade failed"
            exit 1
          fi

      - name: Update version in _config.yml
        if: steps.upgrade.outputs.version != ''
        run: |
          python3 << 'EOF'
          import yaml

          with open('_config.yml', 'r') as f:
              config = yaml.safe_load(f)

          if 'telar' not in config:
              config['telar'] = {}

          config['telar']['version'] = "${{ steps.upgrade.outputs.version }}"
          config['telar']['release_date'] = "$(date +%Y-%m-%d)"

          with open('_config.yml', 'w') as f:
              yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
          EOF

      - name: Create upgrade branch
        if: steps.upgrade.outputs.version != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="upgrade-telar-${{ steps.upgrade.outputs.version }}"

          # Delete remote branch if it exists
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "Upgrade Telar from ${{ steps.check_version.outputs.current_version }} to ${{ steps.upgrade.outputs.version }}"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: create_branch

      - name: Create upgrade issue
        if: steps.upgrade.outputs.version != ''
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get repository info
          REPO="${{ github.repository }}"
          BRANCH="${{ steps.create_branch.outputs.branch_name }}"
          VERSION="${{ steps.upgrade.outputs.version }}"
          FROM_VERSION="${{ steps.check_version.outputs.current_version }}"
          COMPARE_URL="https://github.com/$REPO/compare/main...$BRANCH"

          # Strip YAML frontmatter from UPGRADE_SUMMARY.md (remove everything between first --- and second ---)
          SUMMARY_CONTENT=$(sed '/^---$/,/^---$/d' UPGRADE_SUMMARY.md)

          # Extract automated changes and manual steps counts from the summary
          AUTOMATED_CHANGES=$(grep -o '\*\*Automated changes:\*\* [0-9]\+' UPGRADE_SUMMARY.md | sed 's/.*\*\* \([0-9]\+\)/\1/')
          MANUAL_STEPS=$(grep -o '\*\*Manual steps:\*\* [0-9]\+' UPGRADE_SUMMARY.md | sed 's/.*\*\* \([0-9]\+\)/\1/')

          # Extract manual steps from UPGRADE_SUMMARY.md (if any)
          MANUAL_STEPS_TEXT=$(sed -n '/## Manual Steps Required/,/## Resources/p' UPGRADE_SUMMARY.md | sed '1d;$d' | sed '/^Please complete these after merging:/d' | sed '/^$/d')

          # Create issue body directly with variable expansion
          cat > issue_body.md << EOF
          ## Upgrade Ready: v$FROM_VERSION → v$VERSION

          **Status:** ✅ Automated upgrade complete
          **Branch:** \`$BRANCH\`
          **Changes:** $AUTOMATED_CHANGES automated, $MANUAL_STEPS manual

          ---

          ## Next Step: Review and Merge

          Your Telar site has been successfully upgraded and is ready to merge.

          ### **[Click here to review changes and create pull request]($COMPARE_URL)**

          Then click the green "Create pull request" button, review the changes, and merge to complete the upgrade.

          <details>
          <summary><b>For users who prefer the command line</b> (click to expand)</summary>

          If you prefer working from your terminal:

          \`\`\`bash
          git fetch origin
          git checkout main
          git merge origin/$BRANCH
          git push origin main
          \`\`\`

          This will merge the upgrade branch into your main branch. We recommend using the pull request method above instead, as it provides a better review interface.

          </details>

          ---

          ## After Merging

          Once you've merged the upgrade, please complete the following:

          EOF

          # Add manual steps section only if there are manual steps
          if [ "$MANUAL_STEPS" != "0" ] && [ -n "$MANUAL_STEPS_TEXT" ]; then
            cat >> issue_body.md << EOF
          ### Manual Steps

          $MANUAL_STEPS_TEXT

          EOF
          fi

          # Always add verify section
          cat >> issue_body.md << EOF
          ### Verify Your Site

          After the upgrade completes and your site rebuilds:

          1. Visit your live site and navigate through a few pages
          2. Check for any warning messages or alerts about configuration issues
          3. If you see any warnings, follow the links or documentation provided to resolve them
          4. Test key features like story navigation, image viewing, and glossary terms

          ---

          ## What Changed

          <details>
          <summary><b>View automated changes by category</b> (click to expand)</summary>

          $SUMMARY_CONTENT

          </details>

          ---

          <sub>This upgrade was performed automatically by the Telar upgrade workflow.</sub>
          EOF

          # Create upgrade label if it doesn't exist
          gh label create "upgrade" --description "Automated Telar upgrade" --color "0E8A16" 2>/dev/null || true

          # Create the issue
          gh issue create \
            --title "Upgrade Telar to $VERSION" \
            --body-file issue_body.md \
            --label "upgrade"

      - name: Output summary
        if: steps.upgrade.outputs.version != ''
        run: |
          echo "## ✅ Upgrade Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **From:** ${{ steps.check_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **To:** ${{ steps.upgrade.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ steps.create_branch.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "An issue has been created with upgrade details and merge instructions." >> $GITHUB_STEP_SUMMARY
          echo "Check the **Issues** tab to review and apply the upgrade." >> $GITHUB_STEP_SUMMARY
